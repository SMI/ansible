---
- name: Set service facts
  ansible.builtin.set_fact:
    smi_service_software_rabbitmq_hostname: "{{ groups['rabbitmq'][0] | default('localhost') }}"
    smi_service_software_mongodb_hostname: "{{ groups['mongodb'][0] | default('localhost') }}"
    smi_service_software_rdmp_catalogue_conn_str: "{{
      groups['rdmp'][0] |
      default('server=localhost;uid=SA;password=smiMsSql1.;database=RDMP_Catalogue;Encrypt=false') }}"
    smi_service_software_rdmp_data_export_conn_str: "{{
      groups['rdmp'][0] |
      default('server=localhost;uid=SA;password=smiMsSql1.;database=RDMP_DataExport;Encrypt=false') }}"

- name: Verify smi_service_software_smiservices contains smi_service_software_smiservices_default_version
  ansible.builtin.assert:
    that: smi_service_software_smiservices_default_version in smi_service_software_smiservices.keys()
    msg: "smi_service_software_smiservices_default_version must be listed in smi_service_software_smiservices"

- name: Stat smi_service_software_install_dir
  ansible.builtin.stat:
    path: "{{ smi_service_software_install_dir }}"
  register: stat_result
  failed_when: not stat_result.stat.exists and not smi_service_software_allow_create_install_dir

- name: Ensure subdirectories exists
  become: true
  ansible.builtin.file:
    name: "{{ smi_service_software_install_dir }}/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  with_items:
    - bin
    - configs
    - data
    - data/tessdata
    - software

- name: Template README.md
  become: true
  ansible.builtin.template:
    src: root_readme.md
    dest: "{{ smi_service_software_install_dir }}/README.md"
    owner: root
    group: root
    mode: u=rw,g=r,o=r

- name: Template service scripts to bin
  become: true
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ smi_service_software_install_dir }}/bin/"
    mode: u=rwx,g=rx,o=rx
  with_ansible.builtin.fileglob: templates/bin/*
  tags: [bins]

- name: Check if correct config directories exist
  ansible.builtin.stat:
    path: "{{ smi_service_software_install_dir }}/configs/{{ item.path }}"
  with_community.general.filetree: "{{ smi_service_software_local_configs_template_dir }}"
  when: item.state == "directory" and "/" not in item.path
  register: stat_result

- name: Include deploy_config_dir.yml
  ansible.builtin.include_tasks: deploy_config_dir.yml
  with_items: "{{ stat_result | json_query('results[?!(stat.exists)&&!skipped].item.path') }}"
  loop_control:
    loop_var: config_name

- name: Stat smi_service_software_logs_dir
  ansible.builtin.stat:
    path: "{{ smi_service_software_logs_dir }}"
  register: stat_result
  failed_when: not stat_result.stat.exists and not smi_service_software_allow_create_logs_dir

- name: Create smi_service_software_logs_dir
  become: true
  ansible.builtin.file:
    path: "{{ smi_service_software_logs_dir }}"
    owner: root
    group: "{{ preflight_group_name }}"
    state: directory
    mode: u=rwx,g=rwxs,o=

- name: Stat smi_service_software_pacs_dir
  ansible.builtin.stat:
    path: "{{ smi_service_software_pacs_dir }}"
  register: stat_result
  failed_when: not stat_result.stat.exists and not smi_service_software_allow_create_pacs_dir

- name: Create smi_service_software_pacs_dir
  become: true
  ansible.builtin.file:
    path: "{{ smi_service_software_pacs_dir }}"
    owner: root
    group: "{{ preflight_group_name }}"
    state: directory
    mode: u=rwx,g=rx,o=

- name: Stat smi_service_software_extract_dir
  ansible.builtin.stat:
    path: "{{ smi_service_software_extract_dir }}"
  register: stat_result
  failed_when: not stat_result.stat.exists and not smi_service_software_allow_create_extract_dir

- name: Create smi_service_software_extract_dir
  become: true
  ansible.builtin.file:
    path: "{{ smi_service_software_extract_dir }}"
    owner: root
    group: "{{ preflight_group_name }}"
    state: directory
    mode: u=rwx,g=rwxs,o=

- name: Check if correct SmiServices versions exist
  ansible.builtin.stat:
    path: "{{ smi_service_software_install_dir }}/software/SmiServices/v{{ item }}"
  with_items: "{{ smi_service_software_smiservices.keys() }}"
  register: stat_result

- name: Include deploy_smiservices_version.yml for missing SmiServices versions
  ansible.builtin.include_tasks: deploy_smiservices_version.yml
  with_items: "{{ stat_result | json_query('results[?!(stat.exists)].item') }}"
  loop_control:
    loop_var: smiservices_version_or_sha

- name: Check if correct RDMP versions exist
  ansible.builtin.stat:
    path: "{{ smi_service_software_install_dir }}/software/RDMP/v{{ item }}"
  with_items: "{{ smi_service_software_rdmp.keys() }}"
  register: stat_result

- name: Include deploy_rdmp_version.yml for missing rdmp-cli versions
  ansible.builtin.include_tasks: deploy_rdmp_version.yml
  with_items: "{{ stat_result | json_query('results[?!(stat.exists)].item') }}"
  loop_control:
    loop_var: rdmp_version_or_sha

- name: Ensure tessdata exists
  become: true
  ansible.builtin.get_url:
    url: https://github.com/tesseract-ocr/tessdata/raw/{{ smi_service_software_tessdata_version_or_sha }}/eng.traineddata
    dest: "{{ smi_service_software_install_dir }}/data/tessdata/"
    checksum: "{{ smi_service_software_tessdat_checksum }}"
    mode: u=rw,g=r,o=r
