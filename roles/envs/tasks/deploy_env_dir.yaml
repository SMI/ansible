---
- name: Ensure env dir exists
  ansible.builtin.file:
    path: "{{ envs_envs_dir }}/{{ env_name }}"
    state: directory
    mode: u=rwx,g=rx,o=rx

- name: Ensure env directory structure exists
  ansible.builtin.file:
    path: "{{ envs_envs_dir }}/{{ env_name }}/{{ item.path }}"
    state: directory
    mode: u=rwx,g=rx,o=rx
  with_community.general.filetree: "{{ envs_template_dir }}/{{ env_name }}"
  when: item.state == 'directory'

- name: Load env vault.yaml
  ansible.builtin.include_vars:
    file: "{{ envs_template_dir }}/{{ env_name }}/vault.yaml"
    name: env_vault_vars

- name: Assert env_vault_vars defined
  ansible.builtin.assert:
    that: env_vault_vars is defined
    fail_msg: "Expected to load vars from file. A variable was possibly undefined (see https://github.com/ansible/ansible/issues/25787)"

- name: Load env vars.yaml
  ansible.builtin.include_vars:
    file: "{{ envs_template_dir }}/{{ env_name }}/vars.yaml"
    name: env_vars

- name: Assert env_vars defined
  ansible.builtin.assert:
    that: env_vars is defined
    fail_msg: "Expected to load vars from file. A variable was possibly undefined (see https://github.com/ansible/ansible/issues/25787)"

- name: Ensure files are populated from templates
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ envs_envs_dir }}/{{ env_name }}/{{ item.path }}"
    mode: u=rw,g=r,o=r
  with_community.general.filetree: "{{ envs_template_dir }}/{{ env_name }}"
  when: item.state == 'file' and item.path not in ['vars.yaml', 'vault.yaml']
