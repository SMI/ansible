---
- name: Set smiservices_version_data
  ansible.builtin.set_fact:
    smiservices_version_data: "{{ smi_software_smiservices[smiservices_version_or_sha] }}"
    smiservices_software_version_dir: "{{ smi_software_software_dir }}/SmiServices/v{{ smiservices_version_or_sha }}"

- name: Insert versions into raw package names
  ansible.builtin.set_fact:
    smiservices_packages: >-
      {{ smiservices_packages | default([]) + [{
        'url':
          'https://github.com/SMI/SmiServices/releases/download/v' + smiservices_version_or_sha + '/' +
          (item.name | replace('<VERSION>', smiservices_version_or_sha)),
        'checksum': item.checksum,
      }] }}
  with_items: "{{ smiservices_version_data.release_packages_raw }}"

- name: Create smiservices_tempdir
  ansible.builtin.tempfile:
    state: directory
    suffix: smiservices
  register: smiservices_tempdir
  notify: "service_software : Delete smiservices_tempdir"

- name: Download SmiServices packages
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "{{ smiservices_tempdir.path }}"
    checksum: "{{ item.checksum }}"
    mode: u=rw,g=r,o=r
  with_items: "{{ smiservices_packages }}"

- name: Download SmiServices archive
  ansible.builtin.get_url:
    url: "https://github.com/SMI/SmiServices/archive/refs/tags/v{{ smiservices_version_or_sha }}.tar.gz"
    dest: "{{ smiservices_tempdir.path }}"
    checksum: "{{ smiservices_version_data.source_tar_checksum }}"
    mode: u=rw,g=r,o=r

- name: Find downloaded packages
  ansible.builtin.find:
    path: "{{ smiservices_tempdir.path }}"
    file_type: file
  register: find_result

- name: Unpack packages
  ansible.builtin.unarchive:
    src: "{{ item.path }}"
    dest: "{{ smiservices_tempdir.path }}"
    remote_src: true
  with_items: "{{ find_result.files }}"
  when: not item.path.endswith('.whl')

- name: Remove unused files and directories from SmiServices
  become: true
  ansible.builtin.file:
    path: "{{ smiservices_tempdir.path }}/smi-services-v{{ smiservices_version_or_sha }}-linux-x64/{{ item }}"
    state: absent
  with_items: "{{ smi_software_smiservices_file_blocklist }}"

- name: Copy SmiServices binaries to destination
  become: true
  ansible.builtin.copy:
    src: "{{ smiservices_tempdir.path }}/smi-services-v{{ smiservices_version_or_sha }}-linux-x64/"
    dest: "{{ smiservices_software_version_dir }}/smi/"
    mode: preserve
    remote_src: true

- name: Copy CTPAnonymsier to destination
  become: true
  ansible.builtin.copy:
    src: "{{ smiservices_tempdir.path }}/ctpanonymiser-1.0.0/CTPAnonymiser-portable-1.0.0.jar"
    dest: "{{ smiservices_software_version_dir }}/"
    mode: preserve
    remote_src: true

- name: Copy python wheels to destination
  become: true
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ smiservices_software_version_dir }}/"
    mode: preserve
    remote_src: true
  with_items: "{{ find_result.files }}"
  when: item.path.endswith('.whl')

- name: Copy SmiServices files to destination
  become: true
  ansible.builtin.copy:
    src: "{{ smiservices_tempdir.path }}/SmiServices-{{ smiservices_version_or_sha }}/{{ item }}"
    dest: "{{ smiservices_software_version_dir }}/"
    mode: preserve
    remote_src: true
  with_items: "{{ smiservices_version_data.files_from_source }}"

# TODO(rkm 2023-10-27) This shouldn't be hardcoded / we should be able to pull these in automatically
- name: Ensure libleptonica and libtesseract exist
  become: true
  block:
    - name: Ensure directory exists
      ansible.builtin.file:
        name: "{{ smiservices_software_version_dir }}/smi/runtimes/linux-x64/native/"
        state: directory
        owner: root
        group: root
        mode: u=rwx,g=rx,o=rx
    - name: Download libleptonica
      ansible.builtin.get_url:
        url: https://github.com/SMI/IsIdentifiable/raw/main/IsIdentifiable/runtimes/linux-x64/native/{{ item.name }}
        dest: "{{ smiservices_software_version_dir }}/smi/runtimes/linux-x64/native/"
        checksum: "{{ item.checksum }}"
        mode: u=rw,g=r,o=r
      with_items:
        - name: libleptonica-1.80.0.so
          checksum: "md5:73a5274f300a08d4350c8cf13741c86f"
        - name: libtesseract41.so
          checksum: "md5:3b019d8512f3c1e7454785948028ff02"

- name: Set file permissions
  become: true
  ansible.builtin.file:
    path: "{{ smiservices_software_version_dir }}/"
    owner: root
    group: root
    mode: u=rX,g=rX,o=rX
    recurse: true
